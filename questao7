#Código inseguro informado

#from flask import Flask, request
#app = Flask(__name__)

#@app.route('/login', methods=['POST'])
#def login():
#    username = request.form['username']
#    password = request.form['password']
#    if username == 'admin' and password == '1234':
#        return "Acesso concedido"
#    return "Acesso negado"

#if __name__ == '__main__':
#    app.run(debug=True)

#PROBLEMAS ENCONTRADOS:
#Senha com hardcoded (viável substituição para senha com autenticação segura com hashing)
#debug=True expõe o erro para um possível ataque, o que facilita contornar a segurança do código
#Falta de proteção contra SQL Injection e outros ataques fortes


#CÓDIGO AJUSTADO ABAIXO

from flask import Flask, request, jsonify
from werkzeug.security import check_password_hash

app = Flask(__name__)

# Senha armazenada com hash (substituir por um banco de dados real)
USUARIOS = {"admin": "pbkdf2:sha256:150000$WjY..."}  # Senha armazenada com hash

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if username in USUARIOS and check_password_hash(USUARIOS[username], password):
        return jsonify({"mensagem": "Acesso concedido"}), 200
    return jsonify({"mensagem": "Acesso negado"}), 401

if __name__ == '__main__':
    app.run()
